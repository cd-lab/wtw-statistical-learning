RTfour <- EGfour / ECfour
RTfour
RTone
RTfour
RTthree
15 * 60
900/3.16
284 * 10
2840/100
284 * 2
# scheduled delays are randomly sampled from:
delays <- c(0.264713485566566,
0.661783713916415,
1.257389056441189,
2.150797070228350,
3.490909090909091,
5.501077121930202,
8.516329168461869,
13.039207238259371,
19.823524342955622,
30.000000000000000)
# 8 possible reward times that are uniformly distributed
# create LP reward distribution
PMF <- array(NA, dim = c(length(delays), 1))
d <- cbind(delays, PMF)
# created PMF by hand
d[1,2] <- 1/length(delays)
d[2,2] <- 2/length(delays)
d[3,2] <- 3/length(delays)
d[4:5,2] <- 4/length(delays)
d[5:8,2] <- 5/length(delays)
d[6,2] <- 6/length(delays)
d[7,2] <- 7/length(delays)
d[8,2] <- 8/length(delays)
d[9,2] <- 9/length(delays)
d[10,2] <- 10/length(delays)
# create PMF by hand
PMF_rewards_dist <- d[, 2]
# loop through all possible giving up times
Ts <- d[, 1]
RT <- array(NA, dim = c(length(Ts), 1))
PT <- array(NA, dim = c(length(Ts), 1))
EG <- array(NA, dim = c(length(Ts), 1))
EC <- array(NA, dim = c(length(Ts), 1))
count <- 1
for (T in Ts){
#wait_times <- chosen_rewards_dist[chosen_rewards_dist <= T]
# RT = expected rate of return at time T = expected quitting time
# PT = p(receiving reward at T)
PT[count] <- PMF_rewards_dist[count]
# EG = trials expected gain
# EC = trials expected cost
EG[count] <- (10 * PT[count])
# tauT = E(rewarded_time | rewarded_time <=T)
if (T == delays[1]){
vector <- delays[1]
tauT <- mean(vector)
print(T)
} else if (T == delays[2]){
vector <- delays[1:2]
tauT <- mean(vector)
print(T)
} else if (T == delays[3]){
vector <- delays[1:3]
tauT <- mean(vector)
print(T)
} else if (T == delays[4]){
vector <- delays[1:4]
tauT <- mean(vector)
print(T)
} else if (T == delays[5]){
vector <- delays[1:5]
tauT <- mean(vector)
print(T)
} else if (T == delays[6]){
vector <- delays[1:6]
tauT <- mean(vector)
print(T)
} else if (T == delays[7]){
vector <- delays[1:7]
tauT <- mean(vector)
print(T)
} else if (T == delays[8]){
vector <- delays[1:8]
tauT <- mean(vector)
print(T)
} else if (T == delays[9]){
vector <- delays[1:9]
tauT <- mean(vector)
print(T)
} else if (T == delays[10]){
vector <- delays[1:10]
tauT <- mean(vector)
print(T)
}
# 0.5 s feedback and0.5 s ITI
EC[count] <- (tauT * PT[count] + T * (1 - PT[count])) + 1
RT[count] <- EG[count] / EC[count]
count <- count + 1
}
rewardRate <- max(RT)
bestT <- which(RT == max(RT))
cbind(RT, Ts)
plot(Ts, PT)
plot(Ts, RT)
delays
rewards <- delays[1:4]
quits <- delays[5:10]
pmin(rewards, quits)
rewards
quits
delays[1]
0.1 * delays[1] + 0.1 * delays[2] + 0.1 * delays[3] + 0.7 * delays[4]
### How long does the average trial last?
average_trial <- 0.1 * delays[1] + 0.1 * delays[2] + 0.1 * delays[3] + 0.7 * delays[4]
average_trial_inclITI <- average_trial + 1
average_trial_inclITI
# By applying this strategy, only 40% of trials get rewarded
block_time <- 900
possible_trials <- block_time / average_trial_inclITI
possible_trials
possible_trials * 0.4
number_rewarded_trials <- possible_trials * 0.4
number_rewarded_trials
number_rewarded_trials
delays
possible_trials
number_rewarded_trials
mean1 <- 6
mean2 <- 5
sd1 <- 3
sd2 <- 4
?t.test()
rnorm(100)
?rnorm()
group1 <- rnorm(100, mean = 5, sd = 3)
group1
mean1 <- mean(group1)
mean1
group1 <- rnorm(100, mean = 5, sd = 3)
group2 <- rnorm(100, mean = 6, sd = 2)
mean1 <- mean(group1)
mean2 <- mean(group2)
sd1 <- mean(sd1)
sd2 <- mean(sd2)
sd1
sd2
sd(group1)
group1 <- rnorm(100, mean = 5, sd = 3)
group2 <- rnorm(100, mean = 6, sd = 2)
mean1 <- mean(group1)
mean2 <- mean(group2)
sd1 <- sd(group1)
sd2 <- sd(group2)
?t.test()
df <- as.data.frame(cbind(group1, group2))
df
t.test(df)
mean1 <- mean(group1)
mean2 <- mean(group2)
sd1 <- sd(group1)
sd2 <- sd(group2)
mean1
mean2
sd1
sd2
df
mean1 <- mean(df$group1)
mean2 <- mean(df$group2)
sd1 <- sd(df$group1)
sd2 <- sd(df$group2)
mean2
install.packages("pwr")
library("pwr")
?pwr.t.test()
pwr.t.test(n = 80, d = 0.74)
pwr.t.test(n = 80)
pwr.t.test(n = 80, power = 0.8)
pwr.t.test(n = 80, power = 0.77)
pwr.t.test(n = 80, d = 0.74)
pwr.t.test(n = 80, d = 0.8)
pwr.t.test(n = 80, power = 0.8)
pwr.t.test(n = 160, power = 0.8)
pwr.t.test(n = 300, power = 0.8)
pwr.t.test(n = 80, power = 0.8)
80/16
# Set working directory to functions
setwd("~/Desktop/Cognition/Analysis scripts")
# Load libraries
library('tcltk')
library('survival')
library('lattice')
library('ggplot2')
library('psych')
library('jtools')
source('wtwFxs.R')
library('matrixStats')
library('beeswarm')
library("jtools")
library("lme4")
library("lsr")
library("BayesFactor")
library("lmerTest")
# JASP for Bayes factor
# Read in data files
setwd("~/Desktop/Cognition/study 2a/Study 2a - data files")
# Higher level information per participant
headerInfo <- read.csv("headerFileImplicit.csv")
# Trial data
trialData <- read.csv("implicitData.csv")
# check the loaded data files and save out a summary
# data_summary: Should have basic information on each participant, such as
# ID, date of participation, condition, number of trials, duration, and a check for the inclusion criteria
nblocks <- 2
IDs <- c()
b1_numTrials <- c()
b2_numTrials <- c()
earnings <- c()
date <- c()
manipulation <- c()
file_name <- c()
maxScheduledDelay <- c()
cbal <- c()
cbalAsFactor <- c()
cbalAsFactoradd <- c()
b1_timingCond <- c()
b2_timingCond <- c()
b1_prop_expired <- c()
b2_prop_expired <- c()
large_df <- c()
for (d in unique(trialData$ID)){
data <- subset(trialData, trialData$ID == d)
header <- headerInfo[which(headerInfo$id == d), ]
# We skip data files that are not in the header.list, this removes participant "BX8427"
if (nrow(header) == 0){
next
}
b1_data <- subset(data, blockNum == 1)
b2_data <- subset(data, blockNum == 2)
IDs <- c(IDs, as.character (header$id))
b1_numTrials <- c(b1_numTrials, max(as.numeric(b1_data$trialNum)))
b2_numTrials <- c(b2_numTrials, max(as.numeric(b2_data$trialNum)))
# Information on timing condition
if(as.numeric(header$cbal) == 1){
b1_cond <- "HP"
b2_cond <- "HP"
cbalAsFactoradd <- "HPcongruent"
} else if (as.numeric(header$cbal) == 2){
b1_cond <- "HP"
b2_cond <- "LP"
cbalAsFactoradd <- "LPincongruent"
} else if (as.numeric(header$cbal) == 3){
b1_cond <- "LP"
b2_cond <- "HP"
cbalAsFactoradd <- "HPincongruent"
} else if (as.numeric(header$cbal) == 4){
b1_cond <- "LP"
b2_cond <- "LP"
cbalAsFactoradd <- "LPcongruent"
}
cbalAsFactor <- c(cbalAsFactor, cbalAsFactoradd)
cbal <- c(cbal, as.character(header$cbal))
b1_timingCond <- c(b1_timingCond, b1_cond)
b2_timingCond <- c(b2_timingCond, b2_cond)
# out of all tokens that matured
b1numMaturedTokens <- sum(!is.na(b1_data$rwdOnsetTime))
b2numMaturedTokens <- sum(!is.na(b2_data$rwdOnsetTime))
# how many expired
b1numExpiredTokens <- sum(is.na(b1_data$latency))
b2numExpiredTokens <- sum(is.na(b2_data$latency))
b1_prop_expired <- c(b1_prop_expired, b1numExpiredTokens/b1numMaturedTokens)
b2_prop_expired <- c(b2_prop_expired, b2numExpiredTokens/b2numMaturedTokens)
earnings <- c(earnings, max(as.numeric(data$totalEarned)))
file_name <- c(file_name, as.character(header$dfname))
maxScheduledDelay <- c(maxScheduledDelay, max(as.numeric(data$designatedWait)))
# add RT
data$RT <- as.numeric(data$latency) - as.numeric(data$rwdOnsetTime)
data$ID <- rep(as.character(header$id), nrow(data))
# If the token expired, RT should be NAN
if (sum(as.numeric(data$trialExpired)) > 0){
data$RT[which(data$trialExpired == 1)] <- NaN
}
# add quit index to each data set
data$idxQuit <- rep(0, nrow(data))
data$idxQuit[which(is.na(data$rwdOnsetTime))] <- 1
# Note that expired tokens should be considered wait trials
# If you want to treat them as quit trials (in original analysis but we updated this), add:
data$idxQuit[which(data$trialExpired == 1)] <- 1
# Add to a large data file
large_df <- rbind(large_df, data)
}
dataSummary <- as.data.frame(cbind(IDs, file_name, b1_numTrials, b2_numTrials, earnings, b1_timingCond, b2_timingCond, maxScheduledDelay, cbal, cbalAsFactor))
# Confirm that we are including the correct participants
included_ids <- read.csv("included_participants.csv")
# Included participants (lines up with included_ids)
allIDs = unique(large_df$ID)
n = length(allIDs)
# Preliminary data visualization
# distribution of scheduled delays in each block (ECDF)
# distribution of scheduled delays in each block (autocorrelation plot)
# reaction times
# trial-by-trial data
figDir = "~/Desktop/Cognition/study 2a/analysis_output_2a"
study <- "2a"
# plot the distribution of scheduled delays in each block (ECDF)
figName = file.path(figDir, sprintf('indivs_n%d_scheduledDelaysECDF.pdf', n)) # adjust ECDF
pdf(figName, width=6, height=3*n, pointsize=14)
layout(matrix(1:n, n, 1))
for (id in dataSummary$ID) {
data <-  subset(large_df, large_df$ID == id)
b1_data <- subset(data, blockNum == 1)
b2_data <- subset(data, blockNum == 2)
for (b in 1:nblocks){
if (b == 1){
blockData <- b1_data
} else if (b == 2){
blockData <- b2_data
}
scheduledDelaysECDF(blockData, study, id, dataSummary)
}
}
dev.off()
# plot the distribution of scheduled delays in each block (ACF)
figName = file.path(figDir, sprintf('indivs_n%d_scheduledDelaysACF.pdf', n))
pdf(figName, width=6, height=3*n, pointsize=14)
layout(matrix(1:n, n, 1))
for (id in dataSummary$ID) {
data <-  subset(large_df, large_df$ID == id)
b1_data <- subset(data, blockNum == 1)
b2_data <- subset(data, blockNum == 2)
for (b in 1:nblocks){
if (b == 1){
blockData <- b1_data
} else if (b == 2){
blockData <- b2_data
}
scheduledDelaysACF(blockData, study, id, dataSummary)
}
}
dev.off()
# reaction time plot
figName = file.path(figDir, sprintf('indivs_n%d_RT.pdf', n))
pdf(figName, width=6, height=3*n, pointsize=14)
layout(matrix(1:n, n, 1))
for (id in dataSummary$ID) {
data <-  subset(large_df, large_df$ID == id)
b1_data <- subset(data, blockNum == 1)
b2_data <- subset(data, blockNum == 2)
for (b in 1:nblocks){
if (b == 1){
blockData <- b1_data
} else if (b == 2){
blockData <- b2_data
}
outcomeRT(blockData, study, id, dataSummary)
}
}
dev.off()
# plot trial-by-trial data
figName = file.path(figDir, sprintf('indivs_n%d_trialPlots.pdf', n))
pdf(figName, width=6, height=3*n, pointsize=14)
layout(matrix(1:n, n, 1))
for (id in dataSummary$ID) {
blockData <-  subset(large_df, large_df$ID == id)
trialPlots(blockData, study, id, dataSummary)
}
dev.off()
# survival curve and AUC
grpAUC = data.frame(rownames=allIDs, IDs=allIDs, bk2=numeric(n),
row.names='rownames', stringsAsFactors=FALSE) # initialize group results
scGrid = seq(0, 20, by=0.1)
grpSurvCurves = matrix(nrow=n, ncol=length(scGrid), dimnames=list(dataSummary$ID, scGrid)) # initialize
figName = file.path(figDir, sprintf('indivs_n%d_survivalCurves.pdf', n))
pdf(figName, width=6, height=3*n, pointsize=14)
layout(matrix(1:(n*2), n, 2, byrow=TRUE))
for (id in dataSummary$ID) {
blockData <-  subset(large_df, large_df$ID == id & blockNum == 2 )
# calculate kaplan-meier survival curve and area under the curve
output <- kmsc(blockData, study, id, dataSummary, scGrid)
grpAUC$AUC[which(grpAUC$IDs == id)] = output$auc
grpSurvCurves[id, ] = output$kmOnGrid
}
dev.off()
# save group AUC results
outFileName = file.path(figDir, sprintf('grp_n%d_groupAUC.csv', n))
write.csv(grpAUC, file=outFileName, row.names=FALSE)
AUCResults <- merge(grpAUC, dataSummary, by.x = "IDs")
table(AUCResults$cbalAsFactor)
describeBy(AUCResults$AUC, AUCResults$cbalAsFactor)
AUCResultsHP <- subset(AUCResults, AUCResults$cbalAsFactor == "HPcongruent" | AUCResults$cbalAsFactor == "HPincongruent")
AUCResultsLP <- subset(AUCResults, AUCResults$cbalAsFactor == "LPcongruent" | AUCResults$cbalAsFactor == "LPincongruent")
# Find the confidence interval (set to 95%) for HP
CIcongruentHP <- calcCI(AUCResults$AUC[which(AUCResults$cbalAsFactor == "HPcongruent")], 20)
CIincongruentHP <- calcCI(AUCResults$AUC[which(AUCResults$cbalAsFactor == "HPincongruent")], 20)
# Find the confidence interval (set to 95%) for LP
CIcongruentLP <- calcCI(AUCResults$AUC[which(AUCResults$cbalAsFactor == "LPcongruent")], 20)
CIincongruentLP <- calcCI(AUCResults$AUC[which(AUCResults$cbalAsFactor == "LPincongruent")], 22)
# Create factors for ANOVA
AUCResults$congruency <- rep(NA, dim = c(1,nrow(AUCResults)))
AUCResults$congruency[which(AUCResults$cbalAsFactor == "LPcongruent" | AUCResults$cbalAsFactor == "HPcongruent")] <- "congruent"
AUCResults$congruency[which(AUCResults$cbalAsFactor == "LPincongruent" | AUCResults$cbalAsFactor == "HPincongruent")] <- "incongruent"
# Anova: AUC means by timing condition and manipulation (discrete vs standard)
AUCanova <- aov(AUC ~ b2_timingCond * congruency, data = AUCResults)
summary(AUCanova)
etaSquared(AUCanova)
# HP t-test and Bayes factor
ttestHP <- t.test(AUCResults$AUC[which(AUCResults$cbalAsFactor == "HPcongruent")], AUCResults$AUC[which(AUCResults$cbalAsFactor == "HPincongruent")])
difinAUCHP <- cohensD(mean(AUCResults$AUC[which(AUCResults$cbalAsFactor == "HPcongruent")], na.rm = FALSE),
mean(AUCResults$AUC[which(AUCResults$cbalAsFactor == "HPincongruent")], na.rm = FALSE),
sd(AUCResults$AUC[which(AUCResults$cbalAsFactor == "HPcongruent")], na.rm = FALSE),
sd(AUCResults$AUC[which(AUCResults$cbalAsFactor == "HPincongruent")], na.rm = FALSE),
20,
20)
resultHP <- ttest.tstat(t = ttestHP$statistic,  n1 = 20, n2 = 20)
BFHP <- exp(resultHP[['bf']])
# deviation from the optimal wait time (20 s)
AUCResultsHP$difto20 <-  AUCResultsHP$AUC - 20
CIcongruentHPdif <- calcCI(AUCResultsHP$difto20[which(AUCResultsHP$cbalAsFactor == "HPcongruent")], 20)
CIincongruentHPdif <- calcCI(AUCResultsHP$difto20[which(AUCResultsHP$cbalAsFactor == "HPincongruent")], 20)
# LP t-test and Bayes factor
ttestLP <- t.test(AUCResults$AUC[which(AUCResults$cbalAsFactor == "LPcongruent")], AUCResults$AUC[which(AUCResults$cbalAsFactor == "LPincongruent")])
difinAUCLP <- cohensD(mean(AUCResults$AUC[which(AUCResults$cbalAsFactor == "LPcongruent")], na.rm = FALSE),
mean(AUCResults$AUC[which(AUCResults$cbalAsFactor == "LPincongruent")], na.rm = FALSE),
sd(AUCResults$AUC[which(AUCResults$cbalAsFactor == "LPcongruent")], na.rm = FALSE),
sd(AUCResults$AUC[which(AUCResults$cbalAsFactor == "LPincongruent")], na.rm = FALSE),
20,
22)
resultHP <- ttest.tstat(t = ttestLP$statistic,  n1 = 20, n2 = 22)
BFHP <- exp(resultHP[['bf']])
# compare behavior in LP to optimal behavior (selling just after 2.16)
t.test(AUCResultsLP$AUC[which(AUCResultsLP$cbalAsFactor == "LPcongruent")], mu = 2.16)
t.test(AUCResultsLP$AUC[which(AUCResultsLP$cbalAsFactor == "LPincongruent")], mu = 2.16)
# Mean survival curves by condition
# set up colors for group plots
colHPcongruent <- rgb(0, 0, 225, max = 255, alpha = 125)
colHPincongruent <- rgb(48,213,200, max = 255, alpha = 125)
colHPcongruent_transp = rgb(0, 0, 225, max = 255, alpha = 70)
colHPincongruent_transp <- rgb(48,213,200, max = 255, alpha = 50)
colLPcongruent <- rgb(225, 0, 0, max = 255, alpha = 125)
colLPincongruent <- rgb(255,105,180, max = 255, alpha = 125)
colLPcongruent_transp = rgb(225, 0, 0, max = 255, alpha = 70)
colLPincongruent_transp <- rgb(255,105,180, max = 255, alpha = 50)
colGray = rgb(1/3, 1/3, 1/3)
# Output figure: between-subjects effect in Block 1
#   panel A = Block 1 group mean survival curves
#   panel B = Block 1 group AUC
figName = file.path(figDir, sprintf('Fig2_n%d_survivalByCondition.pdf', n))
pdf(figName, width=6, height=3, pointsize=9)
layout(matrix(1:2, 1, 2), widths=c(0.6, 0.4))
HPcongruentIDs <- AUCResults$IDs[which(AUCResults$cbalAsFactor == "HPcongruent")]
LPcongruentIDs <- AUCResults$IDs[which(AUCResults$cbalAsFactor == "LPcongruent")]
HPincongruentIDs <- AUCResults$IDs[which(AUCResults$cbalAsFactor == "HPincongruent")]
LPincongruentIDs <- AUCResults$IDs[which(AUCResults$cbalAsFactor == "LPincongruent")]
# plot group mean survival curves for block 1 (w/ SEM)
survCurve_grpMean_idxHPcongruent = colMeans2(grpSurvCurves[HPcongruentIDs, ])
survCurve_grpSEM_idxHPcongruent = colSds(grpSurvCurves[HPcongruentIDs, ])/sqrt(length(HPcongruentIDs))
survCurve_grpMean_idxHPincongruent = colMeans2(grpSurvCurves[HPincongruentIDs, ])
survCurve_grpSEM_idxHPincongruent = colSds(grpSurvCurves[HPincongruentIDs, ])/sqrt(length(HPincongruentIDs))
survCurve_grpMean_idxLPcongruent = colMeans2(grpSurvCurves[LPcongruentIDs, ])
survCurve_grpSEM_idxLPcongruent = colSds(grpSurvCurves[LPcongruentIDs, ])/sqrt(length(LPcongruentIDs))
survCurve_grpMean_idxLPincongruent = colMeans2(grpSurvCurves[LPincongruentIDs, ])
survCurve_grpSEM_idxLPincongruent = colSds(grpSurvCurves[LPincongruentIDs, ])/sqrt(length(LPincongruentIDs))
plot('', bty='n', xlab='Delay (s)', xlim=c(0,20), xaxp=c(0, 20, 4),
ylab='Survival rate', ylim=c(0,1), yaxp=c(0, 1, 2),
main='Mean survival curves (w/ SEM)')
# plot HP
errorBand(xData=scGrid, yData=survCurve_grpMean_idxHPcongruent, yErr=survCurve_grpSEM_idxHPcongruent, bandColor=colHPcongruent_transp)
errorBand(xData=scGrid, yData=survCurve_grpMean_idxHPincongruent, yErr=survCurve_grpSEM_idxHPincongruent, bandColor=colHPincongruent_transp)
lines(scGrid, survCurve_grpMean_idxHPcongruent, type='l', lwd=3, col=colHPcongruent)
lines(scGrid, survCurve_grpMean_idxHPincongruent, type='l', lwd=3, col=colHPincongruent)
# plot LP
errorBand(xData=scGrid, yData=survCurve_grpMean_idxLPcongruent, yErr=survCurve_grpSEM_idxLPcongruent, bandColor=colLPcongruent_transp)
errorBand(xData=scGrid, yData=survCurve_grpMean_idxLPincongruent, yErr=survCurve_grpSEM_idxLPincongruent, bandColor=colLPincongruent_transp)
lines(scGrid, survCurve_grpMean_idxLPcongruent, type='l', lwd=3, col=colLPcongruent)
lines(scGrid, survCurve_grpMean_idxLPincongruent, type='l', lwd=3, col=colLPincongruent)
# beeswarm+box plot of group AUC results - between-subject effect for block 1
AUCList = list(
HPcongruent = AUCResults$AUC[which(AUCResults$cbalAsFactor == "HPcongruent")],
HPincongruent = AUCResults$AUC[which(AUCResults$cbalAsFactor == "HPincongruent")],
LPcongruent = AUCResults$AUC[which(AUCResults$cbalAsFactor == "LPcongruent")],
LPincongruent = AUCResults$AUC[which(AUCResults$cbalAsFactor == "LPincongruent")])
boxplot(AUCList, outline=FALSE, boxwex=0.5, col=c(colHPcongruent, colHPincongruent, colLPcongruent, colLPincongruent),
frame.plot=FALSE, boxlty=c('solid', 'dashed'), whisklty='blank', staplelty='blank',
boxcol=colGray, medcol=colGray,
xlab='Manipulation', ylim=c(0,30), yaxp=c(0, 30, 4), ylab='AUC (s)',
main='AUC')
beeswarm(AUCList, pch=16, col=c(colHPcongruent, colHPincongruent, colLPcongruent, colLPincongruent), bty='n', cex=0.9, spacing=0.9, method='compactswarm',
add=TRUE, axes=FALSE)
# end figure
dev.off()
# WTW time series, across both conditions
tGrid = 1:900
wtwTS_results = matrix(data=NA, nrow=n, ncol=length(tGrid), dimnames=list(allIDs))
wtwCeiling=20 # For comparison, we limit this to 20 seconds
id <- "FZ8410"
blockData <-  subset(large_df, large_df$ID == id & large_df$blockNum == 2)
# calculate willingness to wait time-series
wtwTS_results[id, ] <- wtwTS(blockData, tGrid, wtwCeiling)
wtwTS_results[id, ]
nrow(data)
id = "FZ8410"
blockData <-  subset(large_df, large_df$ID == id & large_df$blockNum == 2)
View(blockData)
wtwTS_results[id, ]
nrow(blockData)
blockData$ResponseClockTime = as.numeric(blockData$outcomeTime)
waitDuration = as.numeric(blockData$latency)
idxQuit = as.logical(blockData$idxQuit)
which(idxQuit)
firstQuit = which(idxQuit)[1]
waitDuration[1:firstQuit]
max(waitDuration[1:firstQuit])
